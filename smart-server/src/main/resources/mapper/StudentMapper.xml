<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jsu.mapper.StudentMapper">

    <!-- Search语句 -->
    <select id="getStudentInformation" resultType="com.jsu.vo.StudentVO">
        select * from student_information
    </select>

    <select id="getStudentInformationByStudentNumber" resultType="com.jsu.vo.StudentVO">
        select * from student_information where student_number=#{studentNumber}
    </select>

    <select id="getStudentInformationCount" resultType="Long">
        select COUNT(*) from student_information
    </select>

    <select id="getStudentInformationByPage" resultType="com.jsu.vo.StudentVO">
        select * from student_information limit #{offset},#{limit}
    </select>

    <select id="getCourses" resultType="com.jsu.vo.CourseVO">
        select * from smart_living_program.course limit #{offset},#{limit}
    </select>
    <select id="getCoursesCount" resultType="Long">
        select COUNT(*) from course
    </select>


    <select id="getAllScore" resultType="com.jsu.vo.ScoreVO">
        select score.* ,
               student_information.major,grade,classes,
               course.course_name,course_module,study_method
        from score
        left join course on
        score.course_number=course.course_number
        left join student_information on
        score.student_number=student_information.student_number
        limit #{offset},#{limit}
    </select>
    <select id="getScoreCount" resultType="Long">
        select COUNT(*) from smart_living_program.score
    </select>

    <select id="getAcademicPerformance" resultType="com.jsu.vo.AcademicPerformanceVO">
        select student_number,student_name,classes from academic_performance limit #{offset},#{limit}
    </select>

    <select id="getAcademicPerformanceCount" resultType="Long">
        select COUNT(*) from academic_performance
    </select>

    <!-- 获取学生职业资格证的详细内容 -->
    <select id="getProfessionalQualifications" resultType="com.jsu.entity.ProfessionalQualifications">
        SELECT
            pq.student_number,
            pq.student_name,
            pq.id_card,
            pq.credentials_name,
            pq.certificate_number,
            pq.classification,
            pq.obtaining_time,
            pq.issuing_department,
            pq.photo,
            pq.examination_certificate_number,
            (SELECT COUNT(*) FROM professional_qualifications WHERE student_number = pq.student_number) AS qualification_number
        FROM professional_qualifications pq
        WHERE pq.student_number = #{studentNumber}
        ORDER BY pq.student_number, pq.obtaining_time;
    </select>


    <select id="getProgrammingCapabilities" resultType="com.jsu.vo.ProgrammingCapabilitiesVO">
        select * from programming_capabilities limit #{offset},#{limit}
    </select>
    <select id="getProgrammingCapabilitiesCount" resultType="java.lang.Long">
        select count(*) from programming_capabilities
    </select>

    <select id="getSubjectCompetition" resultType="com.jsu.entity.SubjectCompetition">
        SELECT
            sc.student_number,
            sc.student_name,
            sc.certificate_name,
            sc.organizer,
            sc.award_level,
            sc.participation_form,
            sc.rank,
            sc.get_time,
            sc.certificate_id,
            sc.certificate_number,
            sc.certification_photo,
            sc.sign_up_file,
            COUNT(*) OVER (PARTITION BY sc.student_number) AS competition_number
        FROM subject_competition sc
        WHERE sc.student_number = #{studentNumber}
        ORDER BY sc.student_number, sc.get_time;
    </select>
    
    <select id="getPaperInformation" resultType="com.jsu.vo.PaperVO">
        select * from paper limit #{offset},#{limit}
    </select>

    <!-- MyBatis 查询语句：获取符合条件的学生编号 -->
    <select id="getStudentNumbersByEnglish" resultType="String">
        SELECT student_number
        FROM english_level
        GROUP BY student_number
            LIMIT #{offset}, #{limit}
    </select>

    <!-- MyBatis 查询语句：根据学生编号查询英语水平 -->
    <select id="getEnglishExamDetail" resultMap="englishLevelResultMap">
        SELECT
        el.student_number,
        el.student_name,
        el.id_card,
        el.type_name,
        el.certificate_number,
        el.score,
        el.issuing_department,
        el.get_time,
        el.photo,
        el.college,
        el.major,
        el.examination_certificate_number,
        COUNT(*) OVER (PARTITION BY el.student_number) AS exam_number
        FROM english_level el
        WHERE el.student_number = #{studentNumber}
        ORDER BY el.student_number, el.get_time;
    </select>
    <select id="getStudentNumbersBySA" resultType="java.lang.String">
        select student_number
        from student_award
        group by student_number
        limit #{offset},#{pageSize}
    </select>
    <select id="getStudentAwardDetail" resultType="com.jsu.entity.StudentAwardDetail">
        select
            ac.student_number,
            ac.student_name,
            ac.award_name,
            ac.get_time,
            ac.certificate_number,
            ac.issuing_department,
            ac.classification,
            ac.participate_form,
            ac.ranks,
            ac.photo,
            ac.college,
            ac.major,
            count(*) over (partition by ac.student_number) as exam_number
        from student_award  ac
        where ac.student_number = #{studentNumber}
        order by ac.student_number,ac.get_time;
    </select>
    <!-- 获取职业资格表中符合要求的学生学号-->
    <select id="getStudentNumbersByPRQ" resultType="java.lang.String">
        select student_number
        from professional_qualifications
        group by student_number
            limit #{offset},#{pageSize}
    </select>

    <select id="getStudentNumbersByPaper" resultType="String">
        SELECT student_number
        FROM paper
        GROUP BY student_number
        LIMIT #{offset}, #{limit}
    </select>

    <select id="getPaperList" resultType="com.jsu.entity.Paper">
        SELECT
            p.student_number,
            p.student_name,
            p.paper_name,
            p.journal_name,
            p.year_of_publication,
            p.volume_number,
            p.issue,
            p.article_page,
            p.doi,
            p.editor_ranking,
            p.instructor,
            COUNT(*) OVER (PARTITION BY p.student_number) AS exam_number
        FROM paper p
        WHERE p.student_number = #{studentNumber}
        ORDER BY p.student_number, p.year_of_publication;
    </select>
    <select id="getStudentNumbersBySUC" resultType="java.lang.String">
        SELECT student_number
        FROM subject_competition
        GROUP BY student_number
            LIMIT #{offset}, #{limit}
    </select>

    <!--  获取参加的项目情况  -->
    <select id="getParticipateProject" resultType="com.jsu.entity.ParticipateProjectDetail">
        SELECT
            *,
            COUNT(*) OVER (PARTITION BY pp.student_number) AS copyright_count
        FROM participate_project pp
        WHERE pp.student_number = #{studentNumber}
        ORDER BY pp.student_number, pp.develop_time;
    </select>
    <select id="getStudentNumberByParticipateProject" resultType="String">
        select student_number
        from participate_project
        GROUP BY student_number
            LIMIT #{offset}, #{limit}
    </select>

    <select id="getStudentNumbersBySOC" resultType="java.lang.String">
        SELECT student_number
        FROM software_copyright
        GROUP BY student_number
            LIMIT #{offset}, #{limit}
    </select>
    <select id="getSoftwareCopyright" resultType="com.jsu.entity.SoftwareCopyright">
        SELECT
            sc.student_number,
            sc.student_name,
            sc.software_name,
            sc.completion_date,
            sc.how_to_obtain_rights,
            sc.scope_of_rights,
            sc.registration_number,
            sc.issuing_department,
            sc.issue_date,
            COUNT(*) OVER (PARTITION BY sc.student_number) AS copyright_count
        FROM software_copyright sc
        WHERE sc.student_number = #{studentNumber}
        ORDER BY sc.student_number, sc.issue_date;

    </select>
    <select id="getStudentNumbersByDEP" resultType="java.lang.String">
        SELECT student_number
        FROM development_patent
        GROUP BY student_number
            LIMIT #{offset}, #{limit}
    </select>
    <select id="getDevelopmentPatents" resultType="com.jsu.entity.DevelopmentPatent">
        SELECT
            dp.student_number,
            dp.student_name,
            dp.patent_name,
            dp.patent_number,
            dp.patent_application_time,
            dp.patentee,
            dp.authorization_announcement_date,
            dp.issuing_department,
            COUNT(*) OVER (PARTITION BY dp.student_number) AS patent_count
        FROM development_patent dp
        WHERE dp.student_number = #{studentNumber}
        ORDER BY dp.student_number, dp.authorization_announcement_date;
    </select>

    <resultMap id="englishLevelResultMap" type="com.jsu.entity.EnglishExamDetail">
        <id property="studentNumber" column="student_number"/>
        <result property="studentName" column="student_name"/>
        <result property="idCard" column="id_card"/>
        <result property="typeName" column="type_name"/>
        <result property="issuingDepartment" column="issuing_department"/>
        <result property="getTime" column="get_time"/>
        <result property="photo" column="photo"/>
        <result property="college" column="college"/>
        <result property="major" column="major"/>
        <result property="examinationCertificateNumber" column="examination_certificate_number"/>
    </resultMap>


    <!-- Create语句 -->
    
    <insert id="createStudentInformation">
        insert into
            student_information
            (student_number, student_name, sex, birthday, native_place, height, id_card, family_place, student_phone_number1, student_phone_number2, guardian_ship1, guardian_ship2, guardian_phone_number1, guardian_phone_number2, qq_number, email, wechat_number, health_status, specialty, hobby, political_status, classes, major, grade, college, job1, job2, job3, dormitory_number)
        VALUES
            (#{studentNumber},#{studentName},#{sex},#{birthday},#{nativePlace},#{height},#{idCard},#{familyPlace},#{studentPhoneNumber1},#{studentPhoneNumber2},#{guardianShip1},#{guardianPhoneNumber1},#{guardianShip2},#{guardianPhoneNumber2},#{qqNumber},#{email},#{wechatNumber},#{healthStatus},#{specialty},#{hobby},#{politicalStatus},#{college},#{major},#{grade},#{classes},#{job1},#{job2},#{job3},#{dormitoryNumber})
    </insert>



    <!-- Update语句 -->
    <update id="updateStudentInformation">
        UPDATE student_information
        <set>
            <if test="studentName != null">student_name = #{studentName},</if>
            <if test="sex != null">sex = #{sex},</if>
            <if test="birthday != null">birthday = #{birthday},</if>
            <if test="nativePlace != null">native_place = #{nativePlace},</if>
            <if test="height != null">height = #{height},</if>
            <if test="idCard != null">id_card = #{idCard},</if>
            <if test="familyPlace != null">family_place = #{familyPlace},</if>
            <if test="studentPhoneNumber1 != null">student_phone_number1 = #{studentPhoneNumber1},</if>
            <if test="studentPhoneNumber2 != null">student_phone_number2 = #{studentPhoneNumber2},</if>
            <if test="guardianShip1 != null">guardian_ship1 = #{guardianShip1},</if>
            <if test="guardianPhoneNumber1 != null">guardian_phone_number1 = #{guardianPhoneNumber1},</if>
            <if test="guardianShip2 != null">guardian_ship2 = #{guardianShip2},</if>
            <if test="guardianPhoneNumber2 != null">guardian_phone_number2 = #{guardianPhoneNumber2},</if>
            <if test="qqNumber != null">qq_number = #{qqNumber},</if>
            <if test="email != null">email = #{email},</if>
            <if test="wechatNumber != null">wechat_number = #{wechatNumber},</if>
            <if test="healthStatus != null">health_status = #{healthStatus},</if>
            <if test="specialty != null">specialty = #{specialty},</if>
            <if test="hobby != null">hobby = #{hobby},</if>
            <if test="politicalStatus != null">political_status = #{politicalStatus},</if>
            <if test="college != null">college = #{college},</if>
            <if test="major != null">major = #{major},</if>
            <if test="grade != null">grade = #{grade},</if>
            <if test="classes != null">classes = #{classes},</if>
            <if test="job1 != null">job1 = #{job1},</if>
            <if test="job2 != null">job2 = #{job2},</if>
            <if test="job3 != null">job3 = #{job3},</if>
            <if test="dormitoryNumber != null">dormitory_number = #{dormitoryNumber},</if>
        </set>
        WHERE student_number = #{studentNumber}
    </update>
</mapper>